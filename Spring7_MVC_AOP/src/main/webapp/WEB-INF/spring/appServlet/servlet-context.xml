<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.naver.myhome5" />
	
	<!-- BCryptPasswordEncoder란
		1. 스프링 시큐리티(Spring Security) 프레임워크에서 제공하는 클래스 중 하나로
			  비밀번호를 암호화하고 데이터 베이스에 저장된 비밀번호와 일치하는지를 알려주는
			  메서드를 가진 클래스입니다.
	    2. PasswordEncoder 인터페이스를 구현한 클래스입니다.
	 -->
	 <beans:bean id="bcryptPasswordEncoder" 
	 	  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- 주기적인 작업이 있을 때 @Scheduled 애노테이션을 사용하면 쉽게 적용할 수 있습니다.
        @Scheduled(fixedDelay=1000) 
     -->
    <task:annotation-driven/>
    
    
    
    <!-- 실습1. -->
    <!--
    <beans:bean id="beforelog"
                class="com.naver.myhome5.common.BeforeAdvice"/>
    <aop:config>
       <aop:pointcut id="allPointcut"
           expression="execution(* com.naver.myhome5..*Impl.*(..))"/>
       
       <aop:pointcut id="getPointcut"
           expression="execution(* com.naver.myhome5..*Impl.get*(..))"/>    
           
       <aop:aspect ref="beforelog">
          <aop:before pointcut-ref="allPointcut" method="beforeLog"/>
       </aop:aspect>
    </aop:config> -->

    <!-- 실습2. <aop"before>를 <aop:after>로 변경해 보세요 -->
    
    <!-- 
    <beans:bean id="afterlog"
                class="com.naver.myhome5.common.AfterAdvice"/>
    <aop:config>
       <aop:pointcut id="allPointcut"
           expression="execution(* com.naver.myhome5..*Impl.*(..))"/>
       
       <aop:pointcut id="getPointcut"
           expression="execution(* com.naver.myhome5..*Impl.get*(..))"/>    
           
       <aop:aspect ref="afterlog">
          <aop:before pointcut-ref="allPointcut" method="afterLog"/>
       </aop:aspect>
    </aop:config> -->
    
    <!-- 강사님 코드
    <beans:bean id="after"
		class="com.naver.myhome5.common.AfterAdvice" />
	<aop:config>
		<aop:pointcut id="getPointcut"
			expression="execution(* com.naver.myhome5..*Impl.get*(..))" />
		<aop:aspect ref="after">
			<aop:after pointcut-ref="getPointcut" method="afterLog" />
		</aop:aspect>
	</aop:config>
	 -->
	
	 
	<!-- 실습3. <aop:around> -->
    <!--
    <beans:bean id="around"
          class="com.naver.myhome5.common.AroundAdvice" />
     <aop:config>
       <aop:pointcut id="getPointcut"
           expression="execution(* com.naver.myhome5..*Impl.get*(..))" />               
       <aop:aspect ref="around">
          <aop:around pointcut-ref="getPointcut" method="aroundLog" />
       </aop:aspect>
     </aop:config> -->
     
     <!-- 실습4.
        public void afterReturningLog(Object obj){
        매개변수로 사용하는 obj가 returning="obj" 입니다.
         returning="obj1"로 작성하면 아래와 같은 오류 발생합니다.
            Returning argument name 'obj1'
            was not bound in advice arguments -->
    <!--         
    <beans:bean id="afterreturnin"
          class="com.naver.myhome5.common.AfterReturningAdvice"/>
     <aop:config>
       <aop:pointcut id="getPointcut"
           expression="execution(* com.naver.myhome5..*Impl.get*(..))"/>               
       <aop:aspect ref="afterreturnin">
          <aop:after-returning pointcut-ref="getPointcut" 
             method="afterReturningLog" returning="obj"/>
       </aop:aspect>
     </aop:config>
    -->
    
    <!-- 실습5.
          public void afterThrowingLog(Throwable exp){
              매개변수의 이름과 throwing="exp"의 속성값 일치 시켜야 합니다. -->
     <beans:bean id="afterthrow"
          class="com.naver.myhome5.common.AfterThrowingAdvice"/>
     <aop:config>
       <aop:pointcut id="getPointcut"
           expression="execution(* com.naver.myhome5..*Impl.get*(..))"/>               
       <aop:aspect ref="afterthrow">
          <aop:after-throwing pointcut-ref="getPointcut" 
             method="afterThrowingLog" throwing="exp"/>
       </aop:aspect>
     </aop:config>  
		
   		 		
    
      
</beans:beans>
